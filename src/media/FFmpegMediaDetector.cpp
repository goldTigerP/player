#include "media/FFmpegMediaDetector.h"
#include <QElapsedTimer>
#include <QFileInfo>

bool FFmpegMediaDetector::s_debugEnabled = true;

// üéØ ‰∏ªË¶ÅÊ£ÄÊµãÊñπÊ≥ï - Âü∫‰∫éÁºñËß£Á†ÅÂô®ID
MediaType FFmpegMediaDetector::detectMediaType(const QString &filePath) {
    if (filePath.isEmpty() || !QFileInfo::exists(filePath)) {
        if (s_debugEnabled) qDebug() << "Êñá‰ª∂‰∏çÂ≠òÂú®:" << filePath;
        return InvalidFile;
    }

    AVFormatContext *formatContext = nullptr;

    // ‚ö° Âø´ÈÄüÊ£ÄÊµãÊ®°Âºè - Âè™ËØªÂèñÂøÖË¶Å‰ø°ÊÅØ
    AVDictionary *options = nullptr;
    av_dict_set(&options, "probesize", "65536", 0);          // 64KBÊé¢Êµã
    av_dict_set(&options, "analyzeduration", "1000000", 0);  // 1ÁßíÂàÜÊûê

    int ret = avformat_open_input(&formatContext, filePath.toUtf8().constData(), nullptr, &options);
    av_dict_free(&options);

    if (ret != 0) {
        if (s_debugEnabled) {
            qDebug() << "Êó†Ê≥ïÊâìÂºÄÊñá‰ª∂:" << filePath << "ÈîôËØØÁ†Å:" << ret;
        }
        return InvalidFile;
    }

    // Ëé∑ÂèñÊµÅ‰ø°ÊÅØ
    ret = avformat_find_stream_info(formatContext, nullptr);
    if (ret < 0) {
        if (s_debugEnabled) {
            qDebug() << "Êó†Ê≥ïËé∑ÂèñÊµÅ‰ø°ÊÅØ:" << filePath << "ÈîôËØØÁ†Å:" << ret;
        }
        avformat_close_input(&formatContext);
        return InvalidFile;
    }

    MediaType result = analyzeStreamsByCodecId(formatContext);

    if (s_debugEnabled) {
        qDebug() << "Ê£ÄÊµãÁªìÊûú:" << filePath << "->" << mediaTypeToString(result);
    }

    avformat_close_input(&formatContext);
    return result;
}

// üìä Ëé∑ÂèñËØ¶ÁªÜÂ™í‰Ωì‰ø°ÊÅØ
MediaInfo FFmpegMediaDetector::getDetailedMediaInfo(const QString &filePath) {
    MediaInfo info;
    info.fileName = QFileInfo(filePath).fileName();
    info.fileSize = QFileInfo(filePath).size();

    if (filePath.isEmpty() || !QFileInfo::exists(filePath)) {
        info.primaryType = InvalidFile;
        return info;
    }

    AVFormatContext *formatContext = nullptr;

    int ret = avformat_open_input(&formatContext, filePath.toUtf8().constData(), nullptr, nullptr);
    if (ret != 0) {
        info.primaryType = InvalidFile;
        return info;
    }

    ret = avformat_find_stream_info(formatContext, nullptr);
    if (ret < 0) {
        info.primaryType = InvalidFile;
        avformat_close_input(&formatContext);
        return info;
    }

    // Âü∫Êú¨‰ø°ÊÅØ
    info.formatName = QString(formatContext->iformat->name);
    info.duration = formatContext->duration;

    // ÂàÜÊûêÊâÄÊúâÊµÅÂπ∂Ëé∑ÂèñËØ¶ÁªÜ‰ø°ÊÅØ
    info.primaryType = analyzeStreamsByCodecId(formatContext, &info);

    // Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ
    updateMediaInfoStatistics(info);

    avformat_close_input(&formatContext);
    return info;
}

// üîç Ê†∏ÂøÉÊñπÊ≥ïÔºöÂü∫‰∫éÁºñËß£Á†ÅÂô®IDÂàÜÊûêÊµÅ
MediaType FFmpegMediaDetector::analyzeStreamsByCodecId(AVFormatContext *formatContext,
                                                       MediaInfo *detailInfo) {
    if (!formatContext || formatContext->nb_streams == 0) {
        if (s_debugEnabled) qDebug() << "Ê≤°ÊúâÊâæÂà∞Â™í‰ΩìÊµÅ";
        return Unknown;
    }

    MediaType primaryType = Unknown;
    bool hasVideo = false;
    bool hasAudio = false;
    bool hasImage = false;
    bool hasSubtitle = false;

    if (s_debugEnabled) {
        qDebug() << "=== ÂºÄÂßãÂàÜÊûê" << formatContext->nb_streams << "‰∏™ÊµÅ ===";
    }

    for (unsigned int i = 0; i < formatContext->nb_streams; i++) {
        AVCodecParameters *codecParams = formatContext->streams[i]->codecpar;
        AVStream *stream = formatContext->streams[i];

        if (!codecParams || codecParams->codec_id == AV_CODEC_ID_NONE) {
            if (s_debugEnabled) qDebug() << "ÊµÅ" << i << ": ÁºñËß£Á†ÅÂô®‰ø°ÊÅØÊó†Êïà";
            continue;
        }

        // Ëé∑ÂèñÊµÅ‰ø°ÊÅØÔºàÂ¶ÇÊûúÈúÄË¶ÅËØ¶ÁªÜ‰ø°ÊÅØÔºâ
        if (detailInfo) {
            StreamInfo streamInfo = extractStreamInfo(formatContext, i);
            detailInfo->streams.append(streamInfo);
        }

        // üéØ ÂÖ≥ÈîÆÔºöÂü∫‰∫éÁºñËß£Á†ÅÂô®IDÂà§Êñ≠Â™í‰ΩìÁ±ªÂûã
        MediaType streamType = getMediaTypeByCodecId(codecParams->codec_id);

        if (s_debugEnabled) {
            const AVCodec *codec = avcodec_find_decoder(codecParams->codec_id);
            qDebug() << QString("ÊµÅ %1: ÁºñËß£Á†ÅÂô®=%2 (ID=%3) -> Á±ªÂûã=%4")
                            .arg(i)
                            .arg(codec ? codec->name : "Êú™Áü•")
                            .arg(codecParams->codec_id)
                            .arg(mediaTypeToString(streamType));
        }

        // Ê£ÄÊü•ÊòØÂê¶‰∏∫ÈôÑÂä†ÂõæÁâáÔºàÂ¶Ç‰∏ìËæëÂ∞ÅÈù¢Ôºâ
        bool isAttachedPic = (stream->disposition & AV_DISPOSITION_ATTACHED_PIC);
        if (isAttachedPic && s_debugEnabled) {
            qDebug() << "  -> Ë∑≥ËøáÈôÑÂä†ÂõæÁâá";
            continue;
        }

        // üéØ ËÆæÁΩÆÊ†áÂøóÂíå‰ºòÂÖàÁ∫ß
        switch (streamType) {
        case Video: hasVideo = true; break;
        case Audio: hasAudio = true; break;
        case Image:
            if (!isAttachedPic) {  // ÊéíÈô§ÈôÑÂä†ÂõæÁâá
                hasImage = true;
            }
            break;
        case Subtitle: hasSubtitle = true; break;
        default: break;
        }
    }

    // üéØ ‰ºòÂÖàÁ∫ßÂÜ≥Á≠ñÔºöVideo > Image > Audio > Subtitle
    if (hasVideo) {
        primaryType = Video;
    } else if (hasImage) {
        primaryType = Image;
    } else if (hasAudio) {
        primaryType = Audio;
    } else if (hasSubtitle) {
        primaryType = Subtitle;
    }

    if (s_debugEnabled) {
        qDebug() << QString("ÊúÄÁªàÁ±ªÂûã: %1 (ËßÜÈ¢ë=%2, ÂõæÁâá=%3, Èü≥È¢ë=%4, Â≠óÂπï=%5)")
                        .arg(mediaTypeToString(primaryType))
                        .arg(hasVideo ? "ÊòØ" : "Âê¶")
                        .arg(hasImage ? "ÊòØ" : "Âê¶")
                        .arg(hasAudio ? "ÊòØ" : "Âê¶")
                        .arg(hasSubtitle ? "ÊòØ" : "Âê¶");
    }

    return primaryType;
}

// üéØ Ê†πÊçÆÁºñËß£Á†ÅÂô®IDËé∑ÂèñÂ™í‰ΩìÁ±ªÂûã
MediaType FFmpegMediaDetector::getMediaTypeByCodecId(AVCodecID codecId) {
    // üñºÔ∏è ÂõæÁâáÁºñËß£Á†ÅÂô®
    if (isImageCodec(codecId)) {
        return Image;
    }

    // üé¨ ËßÜÈ¢ëÁºñËß£Á†ÅÂô®
    if (isVideoCodec(codecId)) {
        return Video;
    }

    // üéµ Èü≥È¢ëÁºñËß£Á†ÅÂô®
    if (isAudioCodec(codecId)) {
        return Audio;
    }

    // üìù Â≠óÂπïÁºñËß£Á†ÅÂô®
    if (isSubtitleCodec(codecId)) {
        return Subtitle;
    }

    return Unknown;
}

// üñºÔ∏è Âà§Êñ≠ÊòØÂê¶‰∏∫ÂõæÁâáÁºñËß£Á†ÅÂô®
bool FFmpegMediaDetector::isImageCodec(AVCodecID codecId) {
    switch (codecId) {
    // ÈùôÊÄÅÂõæÁâáÊ†ºÂºè
    case AV_CODEC_ID_MJPEG:     // JPEG
    case AV_CODEC_ID_PNG:       // PNG
    case AV_CODEC_ID_BMP:       // BMP
    case AV_CODEC_ID_TIFF:      // TIFF
    case AV_CODEC_ID_WEBP:      // WebP
    case AV_CODEC_ID_SVG:       // SVG
    case AV_CODEC_ID_PSD:       // Photoshop
    case AV_CODEC_ID_PCX:       // PCX
    case AV_CODEC_ID_SGI:       // SGI
    case AV_CODEC_ID_SUNRAST:   // Sun Raster
    case AV_CODEC_ID_TARGA:     // Targa
    case AV_CODEC_ID_XBM:       // XBM
    case AV_CODEC_ID_XPM:       // XPM
    case AV_CODEC_ID_XWD:       // XWD
    case AV_CODEC_ID_PICTOR:    // Pictor
    case AV_CODEC_ID_PPM:       // PPM
    case AV_CODEC_ID_PBM:       // PBM
    case AV_CODEC_ID_PGM:       // PGM
    case AV_CODEC_ID_PGMYUV:    // PGMYUV
    case AV_CODEC_ID_PAM:       // PAM
    case AV_CODEC_ID_DPX:       // DPX
    case AV_CODEC_ID_EXR:       // OpenEXR
    case AV_CODEC_ID_JPEGLS:    // JPEG-LS
    case AV_CODEC_ID_JPEG2000:  // JPEG 2000
    case AV_CODEC_ID_GIF:       // GIF (ÂèØËÉΩÊòØÂä®Áîª)
    case AV_CODEC_ID_APNG:      // Âä®ÁîªPNG
        return true;
    default: return false;
    }
}

// üé¨ Âà§Êñ≠ÊòØÂê¶‰∏∫ËßÜÈ¢ëÁºñËß£Á†ÅÂô®
bool FFmpegMediaDetector::isVideoCodec(AVCodecID codecId) {
    switch (codecId) {
    // Áé∞‰ª£ËßÜÈ¢ëÁºñËß£Á†ÅÂô®
    case AV_CODEC_ID_H264:        // H.264/AVC
    case AV_CODEC_ID_HEVC:        // H.265/HEVC
    case AV_CODEC_ID_VP8:         // VP8
    case AV_CODEC_ID_VP9:         // VP9
    case AV_CODEC_ID_AV1:         // AV1
    case AV_CODEC_ID_MPEG4:       // MPEG-4
    case AV_CODEC_ID_MPEG2VIDEO:  // MPEG-2
    case AV_CODEC_ID_MPEG1VIDEO:  // MPEG-1
    case AV_CODEC_ID_WMV3:        // WMV3
    case AV_CODEC_ID_VC1:         // VC1
    case AV_CODEC_ID_THEORA:      // Theora
    case AV_CODEC_ID_DIRAC:       // Dirac
    case AV_CODEC_ID_PRORES:      // ProRes
    case AV_CODEC_ID_DNXHD:       // DNxHD
    case AV_CODEC_ID_RAWVIDEO:    // Raw Video
    case AV_CODEC_ID_FFV1:        // FFV1
    case AV_CODEC_ID_HUFFYUV:     // HuffYUV

    // ‰º†ÁªüËßÜÈ¢ëÁºñËß£Á†ÅÂô®
    case AV_CODEC_ID_CINEPAK:    // Cinepak
    case AV_CODEC_ID_INDEO2:     // Indeo 2
    case AV_CODEC_ID_INDEO3:     // Indeo 3
    case AV_CODEC_ID_INDEO4:     // Indeo 4
    case AV_CODEC_ID_INDEO5:     // Indeo 5
    case AV_CODEC_ID_MSMPEG4V1:  // MS MPEG4 V1
    case AV_CODEC_ID_MSMPEG4V2:  // MS MPEG4 V2
    case AV_CODEC_ID_MSMPEG4V3:  // MS MPEG4 V3
    case AV_CODEC_ID_WMV1:       // WMV1
    case AV_CODEC_ID_WMV2:       // WMV2
    case AV_CODEC_ID_FLV1:       // Flash Video
    case AV_CODEC_ID_H263:       // H.263
    case AV_CODEC_ID_H263P:      // H.263+
        return true;
    default: return false;
    }
}

// üéµ Âà§Êñ≠ÊòØÂê¶‰∏∫Èü≥È¢ëÁºñËß£Á†ÅÂô®
bool FFmpegMediaDetector::isAudioCodec(AVCodecID codecId) {
    switch (codecId) {
    // Êó†ÊçüÈü≥È¢ë
    case AV_CODEC_ID_FLAC:     // FLAC
    case AV_CODEC_ID_ALAC:     // Apple Lossless
    case AV_CODEC_ID_APE:      // Monkey's Audio
    case AV_CODEC_ID_WAVPACK:  // WavPack
    case AV_CODEC_ID_TTA:      // True Audio
    case AV_CODEC_ID_SHORTEN:  // Shorten

    // ÊúâÊçüÈü≥È¢ë
    case AV_CODEC_ID_MP3:          // MP3
    case AV_CODEC_ID_AAC:          // AAC
    case AV_CODEC_ID_AC3:          // AC3
    case AV_CODEC_ID_EAC3:         // Enhanced AC3
    case AV_CODEC_ID_DTS:          // DTS
    case AV_CODEC_ID_TRUEHD:       // TrueHD
    case AV_CODEC_ID_VORBIS:       // Ogg Vorbis
    case AV_CODEC_ID_OPUS:         // Opus
    case AV_CODEC_ID_WMAV1:        // WMA V1
    case AV_CODEC_ID_WMAV2:        // WMA V2
    case AV_CODEC_ID_WMAVOICE:     // WMA voice
    case AV_CODEC_ID_WMALOSSLESS:  // WMA Lossless
    case AV_CODEC_ID_WMAPRO:       // WMA Pro

    // PCMÈü≥È¢ë
    case AV_CODEC_ID_PCM_S16LE:  // PCM 16-bit LE
    case AV_CODEC_ID_PCM_S16BE:  // PCM 16-bit BE
    case AV_CODEC_ID_PCM_S24LE:  // PCM 24-bit LE
    case AV_CODEC_ID_PCM_S24BE:  // PCM 24-bit BE
    case AV_CODEC_ID_PCM_S32LE:  // PCM 32-bit LE
    case AV_CODEC_ID_PCM_S32BE:  // PCM 32-bit BE
    case AV_CODEC_ID_PCM_F32LE:  // PCM 32-bit float LE
    case AV_CODEC_ID_PCM_F32BE:  // PCM 32-bit float BE
    case AV_CODEC_ID_PCM_F64LE:  // PCM 64-bit float LE
    case AV_CODEC_ID_PCM_F64BE:  // PCM 64-bit float BE
    case AV_CODEC_ID_PCM_U8:     // PCM 8-bit unsigned
    case AV_CODEC_ID_PCM_S8:     // PCM 8-bit signed

    // ÂÖ∂‰ªñÈü≥È¢ëÊ†ºÂºè
    case AV_CODEC_ID_ADPCM_IMA_WAV:  // ADPCM IMA WAV
    case AV_CODEC_ID_ADPCM_MS:       // ADPCM MS
    case AV_CODEC_ID_GSM:            // GSM
    case AV_CODEC_ID_GSM_MS:         // GSM MS
    case AV_CODEC_ID_AMR_NB:         // AMR Narrowband
    case AV_CODEC_ID_AMR_WB:         // AMR Wideband
        return true;
    default: return false;
    }
}

// üìù Âà§Êñ≠ÊòØÂê¶‰∏∫Â≠óÂπïÁºñËß£Á†ÅÂô®
bool FFmpegMediaDetector::isSubtitleCodec(AVCodecID codecId) {
    switch (codecId) {
    case AV_CODEC_ID_SRT:                 // SubRip
    case AV_CODEC_ID_ASS:                 // Advanced SubStation Alpha
    case AV_CODEC_ID_SSA:                 // SubStation Alpha
    case AV_CODEC_ID_SUBRIP:              // SubRip
    case AV_CODEC_ID_DVD_SUBTITLE:        // DVDÂ≠óÂπï
    case AV_CODEC_ID_DVB_SUBTITLE:        // DVBÂ≠óÂπï
    case AV_CODEC_ID_TEXT:                // Á∫ØÊñáÊú¨Â≠óÂπï
    case AV_CODEC_ID_WEBVTT:              // WebVTT
    case AV_CODEC_ID_PJS:                 // PJSÂ≠óÂπï
    case AV_CODEC_ID_HDMV_PGS_SUBTITLE:   // HDMV PGS
    case AV_CODEC_ID_HDMV_TEXT_SUBTITLE:  // HDMV Text
        return true;
    default: return false;
    }
}

// üìä ÊèêÂèñÊµÅÁöÑËØ¶ÁªÜ‰ø°ÊÅØ
StreamInfo FFmpegMediaDetector::extractStreamInfo(AVFormatContext *formatContext, int streamIndex) {
    StreamInfo info;
    info.index = streamIndex;

    AVCodecParameters *codecParams = formatContext->streams[streamIndex]->codecpar;
    AVStream *stream = formatContext->streams[streamIndex];

    info.codecId = codecParams->codec_id;
    info.type = getMediaTypeByCodecId(codecParams->codec_id);
    info.isAttachedPic = (stream->disposition & AV_DISPOSITION_ATTACHED_PIC);
    info.bitrate = codecParams->bit_rate;

    // Ëé∑ÂèñÁºñËß£Á†ÅÂô®ÂêçÁß∞
    const AVCodec *codec = avcodec_find_decoder(codecParams->codec_id);
    info.codecName = codec ? QString(codec->name) : "Êú™Áü•";

    // Ëé∑ÂèñÊµÅÁ±ªÂûãÂ≠óÁ¨¶‰∏≤
    info.streamTypeString = QString(av_get_media_type_string(codecParams->codec_type));

    // Ê†πÊçÆÁ±ªÂûãÊèêÂèñÁâπÂÆö‰ø°ÊÅØ
    switch (codecParams->codec_type) {
    case AVMEDIA_TYPE_VIDEO:
        info.width = codecParams->width;
        info.height = codecParams->height;
        if (stream->avg_frame_rate.den != 0) {
            info.fps = av_q2d(stream->avg_frame_rate);
        }
        break;

    case AVMEDIA_TYPE_AUDIO:
        info.sampleRate = codecParams->sample_rate;
        info.channels = codecParams->channels;
        info.bitDepth = codecParams->bits_per_coded_sample;
        break;

    default: break;
    }

    return info;
}

// üìä Êõ¥Êñ∞Â™í‰Ωì‰ø°ÊÅØÁªüËÆ°
void FFmpegMediaDetector::updateMediaInfoStatistics(MediaInfo &info) {
    info.hasVideo = false;
    info.hasAudio = false;
    info.hasImage = false;
    info.hasSubtitle = false;

    info.videoStreamCount = 0;
    info.audioStreamCount = 0;
    info.imageStreamCount = 0;
    info.subtitleStreamCount = 0;

    for (const StreamInfo &stream : info.streams) {
        if (stream.isAttachedPic) continue;  // Ë∑≥ËøáÈôÑÂä†ÂõæÁâá

        switch (stream.type) {
        case Video:
            info.hasVideo = true;
            info.videoStreamCount++;
            break;
        case Audio:
            info.hasAudio = true;
            info.audioStreamCount++;
            break;
        case Image:
            info.hasImage = true;
            info.imageStreamCount++;
            break;
        case Subtitle:
            info.hasSubtitle = true;
            info.subtitleStreamCount++;
            break;
        default: break;
        }
    }
}

// üõ†Ô∏è Â∑•ÂÖ∑ÊñπÊ≥ïÂÆûÁé∞
QString FFmpegMediaDetector::mediaTypeToString(MediaType type) {
    switch (type) {
    case Video: return "ËßÜÈ¢ë";
    case Audio: return "Èü≥È¢ë";
    case Image: return "ÂõæÁâá";
    case Subtitle: return "Â≠óÂπï";
    case InvalidFile: return "Êó†ÊïàÊñá‰ª∂";
    default: return "Êú™Áü•";
    }
}

QString FFmpegMediaDetector::codecIdToString(AVCodecID codecId) {
    const AVCodec *codec = avcodec_find_decoder(codecId);
    if (codec) {
        return QString(codec->name);
    }
    return QString("Êú™Áü•ÁºñËß£Á†ÅÂô®(ID:%1)").arg(codecId);
}

QString FFmpegMediaDetector::formatDuration(int64_t microseconds) {
    if (microseconds <= 0) return "Êú™Áü•";

    int seconds = microseconds / 1000000;
    int hours = seconds / 3600;
    int minutes = (seconds % 3600) / 60;
    seconds = seconds % 60;

    if (hours > 0) {
        return QString("%1:%2:%3")
            .arg(hours)
            .arg(minutes, 2, 10, QChar('0'))
            .arg(seconds, 2, 10, QChar('0'));
    } else {
        return QString("%1:%2").arg(minutes).arg(seconds, 2, 10, QChar('0'));
    }
}

QString FFmpegMediaDetector::formatFileSize(int64_t bytes) {
    if (bytes < 1024) {
        return QString("%1 B").arg(bytes);
    } else if (bytes < 1024 * 1024) {
        return QString("%1 KB").arg(bytes / 1024.0, 0, 'f', 1);
    } else if (bytes < 1024 * 1024 * 1024) {
        return QString("%1 MB").arg(bytes / (1024.0 * 1024.0), 0, 'f', 1);
    } else {
        return QString("%1 GB").arg(bytes / (1024.0 * 1024.0 * 1024.0), 0, 'f', 2);
    }
}

bool FFmpegMediaDetector::isValidMediaFile(const QString &filePath) {
    MediaType type = detectMediaType(filePath);
    return (type != Unknown && type != InvalidFile);
}

// üîß Ë∞ÉËØïÊñπÊ≥ï
void FFmpegMediaDetector::printMediaInfo(const MediaInfo &info) {
    qDebug() << "=== Â™í‰ΩìÊñá‰ª∂‰ø°ÊÅØ ===";
    qDebug() << "Êñá‰ª∂Âêç:" << info.fileName;
    qDebug() << "‰∏ªË¶ÅÁ±ªÂûã:" << mediaTypeToString(info.primaryType);
    qDebug() << "ÂÆπÂô®Ê†ºÂºè:" << info.formatName;
    qDebug() << "Êñá‰ª∂Â§ßÂ∞è:" << formatFileSize(info.fileSize);
    qDebug() << "Êó∂Èïø:" << formatDuration(info.duration);
    qDebug() << "ÊµÅÁªüËÆ°: ËßÜÈ¢ë" << info.videoStreamCount << "Èü≥È¢ë" << info.audioStreamCount << "ÂõæÁâá"
             << info.imageStreamCount << "Â≠óÂπï" << info.subtitleStreamCount;

    qDebug() << "\n--- ÊµÅËØ¶ÊÉÖ ---";
    for (const StreamInfo &stream : info.streams) {
        QString streamDesc = QString("ÊµÅ %1: %2 (%3)")
                                 .arg(stream.index)
                                 .arg(stream.codecName)
                                 .arg(mediaTypeToString(stream.type));

        if (stream.type == Video && !stream.isAttachedPic) {
            streamDesc += QString(" %1x%2 %3fps")
                              .arg(stream.width)
                              .arg(stream.height)
                              .arg(stream.fps, 0, 'f', 2);
        } else if (stream.type == Audio) {
            streamDesc += QString(" %1Hz %2Â£∞ÈÅì").arg(stream.sampleRate).arg(stream.channels);
        }

        if (stream.isAttachedPic) {
            streamDesc += " [ÈôÑÂä†ÂõæÁâá]";
        }

        qDebug() << streamDesc;
    }
    qDebug() << "==================";
}

void FFmpegMediaDetector::enableDebugOutput(bool enable) { s_debugEnabled = enable; }

// üîç Ëé∑ÂèñÊîØÊåÅÁöÑÁºñËß£Á†ÅÂô®ÂàóË°®
QStringList FFmpegMediaDetector::getSupportedVideoCodecs() {
    QStringList codecs;
    const AVCodec *codec = nullptr;
    void *iter = nullptr;

    while ((codec = av_codec_iterate(&iter))) {
        if (codec->type == AVMEDIA_TYPE_VIDEO && av_codec_is_decoder(codec)) {
            if (isVideoCodec(codec->id)) {
                codecs << QString(codec->name);
            }
        }
    }

    codecs.removeDuplicates();
    codecs.sort();
    return codecs;
}

QStringList FFmpegMediaDetector::getSupportedAudioCodecs() {
    QStringList codecs;
    const AVCodec *codec = nullptr;
    void *iter = nullptr;

    while ((codec = av_codec_iterate(&iter))) {
        if (codec->type == AVMEDIA_TYPE_AUDIO && av_codec_is_decoder(codec)) {
            if (isAudioCodec(codec->id)) {
                codecs << QString(codec->name);
            }
        }
    }

    codecs.removeDuplicates();
    codecs.sort();
    return codecs;
}

QStringList FFmpegMediaDetector::getSupportedImageCodecs() {
    QStringList codecs;
    const AVCodec *codec = nullptr;
    void *iter = nullptr;

    while ((codec = av_codec_iterate(&iter))) {
        if (codec->type == AVMEDIA_TYPE_VIDEO && av_codec_is_decoder(codec)) {
            if (isImageCodec(codec->id)) {
                codecs << QString(codec->name);
            }
        }
    }

    codecs.removeDuplicates();
    codecs.sort();
    return codecs;
}